     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 01FEFD04                    a db 1, -2, -3, 4 ;1 FE FD 4
    15                                      len_a equ $-a
    16 00000004 F6010DFF                    b db -10, 1, 13, -1 ; F6 1 0D FF
    17                                      len_b equ $-b
    18 00000008 00<rept>                    rez times (len_a+ len_b) db 0 ;rez= FE FD F6 FF
    19                                  
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23                                          ; ...
    24 00000000 B800000000                      mov eax,0
    25 00000005 BB00000000                      mov ebx, 0
    26 0000000A B900000000                      mov ecx,0
    27 0000000F BA00000000                      mov edx,0
    28 00000014 BE00000000                      mov esi, 0
    29 00000019 BF00000000                      mov edi, 0
    30 0000001E B904000000                      mov ecx, len_a
    31                                          
    32                                          Repeta:
    33 00000023 8A86[00000000]                      mov al, [a+esi]
    34 00000029 3C00                                cmp al, 0
    35 0000002B 7D02                                jge pozitive
    36 0000002D 7C01                                jl negative
    37                                                  pozitive:
    38 0000002F 46                                         inc esi
    39                                                  negative:
    40 00000030 8A86[00000000]                              mov al, [a+esi]
    41 00000036 8887[08000000]                              mov [rez+edi], al
    42 0000003C 46                                          inc esi
    43 0000003D 47                                          inc edi
    44 0000003E E2E3                            loop Repeta
    45                                          
    46                                          
    47 00000040 BE00000000                      mov esi, 0
    48 00000045 B904000000                      mov ecx, len_b
    49                                          Repeta1:
    50 0000004A 8A86[00000000]                      mov al, [a+esi]
    51 00000050 3C00                                cmp al, 0
    52 00000052 7D02                                jge pozitive1
    53 00000054 7C01                                jl negative1
    54                                                  pozitive1:
    55 00000056 46                                         inc esi
    56                                                  negative1:
    57 00000057 8A86[04000000]                              mov al, [b+esi]
    58 0000005D 8887[08000000]                              mov [rez+edi], al
    59 00000063 46                                          inc esi
    60 00000064 47                                          inc edi
    61 00000065 E2E3                            loop Repeta1
    62                                          
    63                                          
    64                                          
    65                                      
    66                                          ; exit(0)
    67 00000067 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    68 00000069 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
